## Figure -- Visualize effect of selection on residuals.
set.seed(1)
alpha <- .3
n <- 7e2
v.bw <- 0
v <- runif(n,1,5)
y <- rnorm(n,sd=sqrt(v+v.bw))
keep.idx <- y/sqrt(v) > qnorm(1-alpha/2) ## p-val thresholding
data.sets <- list(preselect=list(y=y,v=v),postselect=list(y=y[keep.idx],v=v[keep.idx]))
file.name <- NULL
file.name <- './figs/heuristic.tex'
if(!is.null(file.name))tikzDevice::tikz(file.name, width = 6.5, height = 3)        
op <- par(mfrow=c(1,2))
invisible(lapply(data.sets, function(data.set) {
    with(data.set, {
        ## lm0 <- lm(I(y/sqrt(v+v.bw)) ~ I(1/sqrt(v+v.bw)))
        lm0 <- lm(I((y-mean(y))/sqrt(v+v.bw)) ~ I(1/sqrt(v+v.bw)))
        theta.fe <- sum(y*v)/sum(v)
        lm0 <- lm(I((y-theta.fe)/sqrt(v)) ~ I(1/sqrt(v)))
        ## plot(1/sqrt(v+v.bw),resid(lm0))
        hist(resid(lm0),breaks=30,xlab="residuals",freq=FALSE,main=NULL)
    })
}))
par(op)
if(!is.null(file.name))dev.off()





##(from lin.R 15d) gaussian model--FPR sim to verify O(1/n)
## convergence to nominal rate. redoing using correct normalizations.
set.seed(1)
source('utils.R')
## dZ <- dnorm #1
rZ <- rnorm #1
rVar <- function(n)runif(n,1,4)^2
start <- Sys.time()
ns <- 5:100
## ns <- 5:10
## ns <- 30:90
## q <- seq(-1,1,len=10)*3
p.vals <- parallel::mclapply(ns, mc.cores=4, FUN=function(n) {
    print(n)
    B <- round(n^2)
    replicate(B, {
        z <- rZ(n)
        ## s <- rS(n)
        s <- 1/sqrt(rVar(n))
        ## Xbar <- c(mean(s),mean(z),mean(s^2),mean(z^2),mean(s*z))
        ## sqrt(n)*A(Xbar)
        y <- z/s
        v <- 1/s^2
        c(Egger=egger.test(y=y,v=v)$p.value,
          skew=skew.test(y=y,v=v)$p.value)
    })
})
print(Sys.time() - start)
## p.vals <- simplify2array(p.vals)print(Sys.time() - start)
alpha <- .1
p.vals.egger <- sapply(p.vals,function(x)x['Egger',])
p.vals.skew <- sapply(p.vals,function(x)x['skew',])
by.test <- list(Egger=p.vals.egger,skew=p.vals.skew)
## save.image('250620a.RData')
save.image('250817a.RData')

## extrafont::loadfonts(quiet=TRUE)
## ## cairo_pdf('figs/gaussian.pdf', family='CMU Serif', width=9, height=4.5)
## edgeworth <- list('Egger'=function(q,n)pnorm(q) - dnorm(q)*1/4*(q^3+q)/n, 'skew'=function(q,n)pnorm(q) - dnorm(q)*(-9*q/2/n +5/6/n*(q^3-3*q) )  )
## ## save.image('250213.RData')
## op <- par(mfrow=c(1,2))
## for(test.name in names(by.test)) {
##     p.vals.test <- by.test[[test.name]]
##     fpr <- sapply(p.vals.test, function(x)mean(x<alpha))
##     cdf.ew <- edgeworth[[test.name]]
##     fpr.error.ew <- function(n)abs(cdf.ew(qnorm(alpha/2),n) + 1-cdf.ew(qnorm(1-alpha/2),n) - alpha)
##     plot(ns,abs(fpr-alpha),xlab='number of studies',ylab=paste0('|observed - nominal FPR|'),main=test.name)
##     curve(fpr.error.ew,add=TRUE)
##     ## plot(log(ns),log(abs(fpr-alpha)),xlab='number of studies',ylab=paste0('|observed - nominal FPR|'),main=test.name,asp=1)
##     ## lines(log(ns),log(fpr.error.ew(ns)))
##     ## plot(ns,abs(fpr-alpha),xlab='number of studies',ylab=paste0('|observed - nominal FPR|'),main=test.name,asp=1,log='xy')
##     ## lines(ns,fpr.error.ew(ns))
## }
## par(op)
## ## dev.off()



## using tikzdevice
file.name <- NULL
file.name <- './figs/gaussian.tex'
if(!is.null(file.name))tikzDevice::tikz(file.name, width = 6.5, height = 3)        
edgeworth <- list('Egger'=function(q,n)pnorm(q) - dnorm(q)*1/4*(q^3+q)/n, 'skew'=function(q,n)pnorm(q) - dnorm(q)*(-9*q/2/n +5/6/n*(q^3-3*q) )  )
op <- par(mfrow=c(1,2))
for(test.name in names(by.test)) {
    p.vals.test <- by.test[[test.name]]
    fpr <- sapply(p.vals.test, function(x)mean(x<alpha))
    cdf.ew <- edgeworth[[test.name]]
    fpr.error.ew <- function(n)abs(cdf.ew(qnorm(alpha/2),n) + 1-cdf.ew(qnorm(1-alpha/2),n) - alpha)
    plot(ns,abs(fpr-alpha),xlab='number of studies',ylab=paste0('$|$observed - nominal FPR$|$'),main=paste0(test.name,' test'),cex=1/2)
    curve(fpr.error.ew,add=TRUE)
}
par(op)
if(!is.null(file.name))dev.off()







## ## redo gaussian model edgeworth plot with fpr rather than fpr-nominal. decided against using. 

## ##(from lin.R 15d) gaussian model--FPR sim to verify O(1/n)
## ## convergence to nominal rate. redoing using correct normalizations.
## set.seed(0)
## source('utils.R')
## ## dZ <- dnorm #1
## rZ <- rnorm #1
## rVar <- function(n)runif(n,1,4)^2
## start <- Sys.time()
## ns <- 5:100
## ## ns <- 5:10
## ## ns <- 30:90
## ## q <- seq(-1,1,len=10)*3
## p.vals <- parallel::mclapply(ns, mc.cores=4, FUN=function(n) {
##     print(n)
##     B <- round(n^2)
##     replicate(B, {
##         z <- rZ(n)
##         ## s <- rS(n)
##         s <- 1/sqrt(rVar(n))
##         ## Xbar <- c(mean(s),mean(z),mean(s^2),mean(z^2),mean(s*z))
##         ## sqrt(n)*A(Xbar)
##         y <- z/s
##         v <- 1/s^2
##         c(Egger=egger.test(y=y,v=v)$p.value,
##           skew=skew.test(y=y,v=v)$p.value)
##     })
## })
## print(Sys.time() - start)
## ## p.vals <- simplify2array(p.vals)print(Sys.time() - start)
## alpha <- .1
## p.vals.egger <- sapply(p.vals,function(x)x['Egger',])
## p.vals.skew <- sapply(p.vals,function(x)x['skew',])
## by.test <- list(Egger=p.vals.egger,skew=p.vals.skew)
## ## save.image('250620a.RData')

## extrafont::loadfonts(quiet=TRUE)
## ## cairo_pdf('figs/gaussian.pdf', family='CMU Serif', width=9, height=4.5)
## edgeworth <- list('Egger'=function(q,n)pnorm(q) - dnorm(q)*1/4*(q^3+q)/n, 'skew'=function(q,n)pnorm(q) - dnorm(q)*(-9*q/2/n +5/6/n*(q^3-3*q) )  )
## ## save.image('250213.RData')
## op <- par(mfrow=c(1,2))
## for(test.name in names(by.test)) {
##     p.vals.test <- by.test[[test.name]]
##     fpr <- sapply(p.vals.test, function(x)mean(x<alpha))
##     cdf.ew <- edgeworth[[test.name]]
##     fpr.ew <- function(n)abs(cdf.ew(qnorm(alpha/2),n) + 1-cdf.ew(qnorm(1-alpha/2),n))
##     plot(ns,abs(fpr),xlab='number of studies',ylab=paste0('|observed - nominal FPR|'),main=test.name,ylim=c(0,.2))
##     curve(fpr.ew,add=TRUE)
##     abline(h=alpha,lty=2)
## }
## par(op)
## ## dev.off()



## ## (from lin.R 10b) moment model--FPR sim with lognormal data
## fpr.sim <- function(rY,sigma.Y,rM,ns,pb.test,n.to.B,alpha) {    
##     ## browser()
##     p.vals <- parallel::mclapply(ns, mc.cores=4, FUN=function(n) {
##         cat('.')
##         ## p.vals <- sapply(ns, FUN=function(n) {
##         B <- n.to.B(n)
##         replicate(B, {
##             m <- rM(n)
##             y <- sapply(m,function(mi)mean(rY(mi)))
##             v <- sigma.Y(y)^2/m
##             pb.test(y,v)$p.value
##             ## browser()
##         })
##     })
##     fpr <- sapply(p.vals, function(x)mean(x<alpha))
## }
## ## mu.log <- 0
## ## sigma.log <- 2
## source('utils.R')
## set.seed(1)
## alpha <- .05
## pb.test <- egger.test
## ## rY <- function(m)exp(rnorm(m,mu.log,sigma.log))
## rM <- function(n)sample(20:1e2,n,replace=TRUE)
## n.to.B <- function(n)n^4
## start <- Sys.time()
## ns <- 5:30
## pb.tests <- list(Egger=egger.test,skew=skew.test)
## mu <- 0
## params <- expand.grid(pb.test=c('Egger','skew'),sigma=c(.8,1,1.2),stringsAsFactors=FALSE)
## params <- within(params,sigma.Y <- function(y)sqrt((exp(sigma^2)-1)*exp(2*mu+sigma^2)))
## ## paramsi <- params[2,]
## out <- apply(params,1, FUN=function(paramsi) fpr.sim(rY=function(m)exp(rnorm(m,0,as.numeric(paramsi[['sigma']]))),sigma.Y=as.numeric(paramsi[['sigma.Y']]), rM=rM,ns=ns,pb.test=pb.tests[[paramsi[['pb.test']]]],n.to.B=n.to.B,alpha=alpha) )
## print(Sys.time() - start)
## ## save.image('250301.RData')


## extrafont::loadfonts(quiet=TRUE)
## cairo_pdf('figs/mean.pdf', family='CMU Serif', width=9, height=4.5)
## ## pdf('figs/moment.pdf', width = 17.35 , height = 23.35 / 2.54, pointsize = 18)
## op <- par(mfrow=c(1,2))
## for(test.name in names(pb.tests)) {
##     idx <- params$pb.test==test.name
##     sigma <- params$sigma[idx]
##     fpr <- out[,idx]
##     matplot(ns,abs(fpr-alpha),type='l',main=test.name,xlab='N',ylab='|observed - nominal FPR|',col=1,lty=1:3)
## }
## par(op)
## legend('bottomright',lty=1:3,legend=paste0('sigma= ',unique(params$sigma)))
## dev.off()




## set.seed(1)
## source('utils.R')
## mu.log <- 0
## sigma.log <- 1
## rY <- function(m)exp(rnorm(m,mu.log,sigma.log))
## rM <- function(n)sample(20:1e2,n,replace=TRUE)
## n.to.B <- function(n)n^3
## sigma.Y <- sqrt((exp(sigma.log^2)-1)*exp(2*mu.log+sigma.log^2))
## start <- Sys.time()
## ns <- 5:30
## ## ns <- round(seq(10,1e2,len=60))
## p.vals <- sapply(ns, FUN=function(n) {
##     ## p.vals <- parallel::mclapply(ns, mc.cores=4, FUN=function(n) {
##     cat('.')
##     ## browser()
##     B <- n.to.B(n)
##     replicate(B, {
##         m <- rM(n)
##         ## m <- round(seq(20,1e2,len=n))
##         ## y <- sapply(m,function(mi)mean(exp(rnorm(mi,mu.log,sigma.log))))
##         y <- sapply(m,function(mi)mean(rY(mi)))
##         v <- sigma.Y^2/m
##         ## var(replicate(1e4,mean(exp(rnorm(20,mu.log,sigma.log)))))        
##         c(egger=egger.test(y=y,v=v)$p.value,
##           skew=skew.test(y=y,v=v)$p.value)
##     })
## })

## ## print(Sys.time() - start)
## ## p.vals <- simplify2array(p.vals)
## print(Sys.time() - start)
## alpha <- .1
## p.vals.egger <- sapply(p.vals,function(x)x['egger',])
## p.vals.skew <- sapply(p.vals,function(x)x['skew',])
## by.test <- list(egger=p.vals.egger,skew=p.vals.skew)
## op <- par(mfrow=c(1,2))
## for(test.name in names(by.test)) {
##     p.vals.test <- by.test[[test.name]]
##     ## fpr <- colMeans(p.vals.test<alpha)
##     fpr <- sapply(p.vals.test, function(x)mean(x<alpha))
##     plot(ns,abs(fpr-alpha),xlab='N',ylab=expression('|observed FPR - '~alpha~'|'))
##     ## lm0 <- lm(log(abs(fpr-alpha))~log(ns))
##     ## coef(lm0)
##     ## skewes(ns,exp(fitted(lm0)))
##     ## label.i <- round(length(ns)/3)
##     ## text(ns[label.i],exp(fitted(lm0)[label.i]),pos=3,offset=1,substitute('y'~'='~beta0 * N^beta1, list(beta0=round(coef(lm0)[1],2), beta1=round(coef(lm0)[2],2))))
## }
## par(op)



## fpr.sim <- function(rY,sigma.Y,rM,ns,pb.test,n.to.B,alpha) {    
##     ## browser()
##     p.vals <- parallel::mclapply(ns, mc.cores=4, FUN=function(n) {
##         ## cat('.')
##         print(n)
##         ## p.vals <- sapply(ns, FUN=function(n) {
##         B <- n.to.B(n)
##         replicate(B, {
##             m <- rM(n)
##             y <- sapply(m,function(mi)mean(rY(mi)))
##             v <- sigma.Y^2/m
##             pb.test(y,v)$p.value
##             ## browser()
##         })
##     })
##     fpr <- sapply(p.vals, function(x)mean(x<alpha))
## }
## ## mu.log <- 0
## ## sigma.log <- 2
## source('utils.R')
## set.seed(0)
## alpha <- .1
## pb.test <- egger.test
## ## rY <- function(m)exp(rnorm(m,mu.log,sigma.log))
## rM <- function(n)sample(20:1e2,n,replace=TRUE)
## ## rM <- function(n)rpois(n,n)
## n.to.B <- function(n)n^3
## start <- Sys.time()
## ns <- 5:100
## pb.tests <- list(Egger=egger.test,skew=skew.test)
## skews <- c(1,2,3)
## skew <- function(sigma)(exp(sigma^2)+2)*sqrt(exp(sigma^2)-1)
## sigmas <- sapply(skews, function(skew) uniroot(function(sigma)skew(sigma)-skew,c(0,10))$root)
## mu <- 0
## params <- expand.grid(pb.test=c('Egger','skew'),sigma=sigmas,stringsAsFactors=FALSE)
## params <- within(params,sigma.Y <- sqrt((exp(sigma^2)-1)*exp(2*mu+sigma^2)))
## ## paramsi <- params[2,]
## out <- apply(params,1, FUN=function(paramsi) fpr.sim(rY=function(m)exp(rnorm(m,0,as.numeric(paramsi[['sigma']]))),sigma.Y=as.numeric(paramsi[['sigma.Y']]), rM=rM,ns=ns,pb.test=pb.tests[[paramsi[['pb.test']]]],n.to.B=n.to.B,alpha=alpha) )
## print(Sys.time() - start)
## ## save.image('250301.RData')


## extrafont::loadfonts(quiet=TRUE)
## ## cairo_pdf('figs/moment.pdf', family='CMU Serif', width=9, height=4.5)
## op <- par(mfrow=c(1,2))
## for(test.name in names(pb.tests)) {
##     idx <- params$pb.test==test.name
##     sigma <- params$sigma[idx]
##     fpr <- out[,idx]
##     matplot(ns,abs(fpr-alpha),type='l',main=test.name,xlab='n',ylab='|observed - nominal FPR|',col=1,lty=1:3)
## }
## par(op)
## legend('topright',lty=1:3,legend=paste0('skew=',skews))
## ## dev.off()

## ## sigmas <- c(.8,1,1.2)
## ## (exp(sigmas^2)+2)*sqrt(exp(sigmas^2)-1)
## ## skews <- c(1,2,3)
## ## ## skews <- c( 3.689292,  6.184877, 11.163846)
## ## skew <- function(sigma)(exp(sigma^2)+2)*sqrt(exp(sigma^2)-1)
## ## sigmas <- sapply(skews, function(skew) uniroot(function(sigma)skew(sigma)-skew,c(0,10))$root)







## ## misspecified model--SMDs

## set.seed(0)
## source('utils.R')
## ## dZ <- dnorm #1
## ## rZ <- rnorm #1
## ## dZ <- function(x)dexp(x+1) #2
## ## rZ <- function(n)rexp(n)-1 #2
## dW <- function(x)dexp(x+1)
## rW<- function(n)rexp(n)-1
## ## dS <- dunif
## ## rS <- runif
## ## dvar <- function(x)dunif(x-1)
## ## rvar <- function(n)runif(n)+1
## start <- Sys.time()
## ns <- 5:40
## ## ns <- 5:10
## ns <- 5:100
## ## q <- seq(-1,1,len=10)*3
## p.vals <- parallel::mclapply(ns, mc.cores=4, FUN=function(n) {
##     print(n)
##     B <- 1e4
##     m <- n^2
##     replicate(B, {
##         ## z <- rZ(n)
##         ## s <- rS(n)
##         w <- matrix(rW(m*n),ncol=m)
##         y <- rowMeans(w)
##         v <- apply(w,1,var)/m
##         c(Egger=egger.test(y=y,v=v)$p.value,
##           skew=skew.test(y=y,v=v)$p.value)
##     })
## })
## print(Sys.time() - start)
## ## p.vals <- simplify2array(p.vals)print(Sys.time() - start)
## alpha <- .1
## p.vals.egger <- lapply(p.vals,function(x)x['Egger',])
## p.vals.skew <- lapply(p.vals,function(x)x['skew',])
## by.test <- list(Egger=p.vals.egger,skew=p.vals.skew)
## ## save.image('250213.RData')
## ## save.image('250621.RData')

## extrafont::loadfonts(quiet=TRUE)
## ## cairo_pdf('figs/misspecified-smd.pdf', family='CMU Serif', width=9, height=4.5)
## op <- par(mfrow=c(1,2))
## for(test.name in names(by.test)) {
##     p.vals.test <- by.test[[test.name]]
##     fpr <- sapply(p.vals.test, function(x)mean(x<alpha))
##     plot(ns,abs(fpr-alpha),xlab='n',ylab=paste0('|observed - nominal FPR|'), main=test.name)
## }
## par(op)
## ## dev.off()





## ## misspecified model--SMDs--using lognormal

## set.seed(0)
## source('utils.R')
## ## dZ <- dnorm #1
## ## rZ <- rnorm #1
## ## dZ <- function(x)dexp(x+1) #2
## ## rZ <- function(n)rexp(n)-1 #2
## skew <- 1
## sigma.to.skew <- function(sigma)(exp(sigma^2)+2)*sqrt(exp(sigma^2)-1)
## sigma <- uniroot(function(sigma)sigma.to.skew(sigma)-skew,c(0,10))$root
## ## dW <- function(x)dexp(x+1)
## ## rW<- function(n)rexp(n)-1
## rW <- function(m)exp(rnorm(m,0,sd=sigma))
## ## dS <- dunif
## ## rS <- runif
## ## dvar <- function(x)dunif(x-1)
## ## rvar <- function(n)runif(n)+1
## start <- Sys.time()
## ns <- 5:40
## ## ns <- 5:10
## ns <- 5:100
## ## ns <- round(seq(5,100,len=50))
## ## q <- seq(-1,1,len=10)*3
## p.vals <- parallel::mclapply(ns, mc.cores=4, FUN=function(n) {
##     print(n)
##     B <- 1e2
##     m <- n^1
##     replicate(B, {
##         ## z <- rZ(n)
##         ## s <- rS(n)
##         w <- matrix(rW(m*n),ncol=m)
##         y <- rowMeans(w)
##         v <- apply(w,1,var)/m
##         c(Egger=egger.test(y=y,v=v)$p.value,
##           skew=skew.test(y=y,v=v)$p.value)
##     })
## })
## print(Sys.time() - start)
## ## p.vals <- simplify2array(p.vals)print(Sys.time() - start)
## alpha <- .1
## p.vals.egger <- lapply(p.vals,function(x)x['Egger',])
## p.vals.skew <- lapply(p.vals,function(x)x['skew',])
## by.test <- list(Egger=p.vals.egger,skew=p.vals.skew)
## ## save.image('250213.RData')
## ## save.image('250621.RData')
## extrafont::loadfonts(quiet=TRUE)
## ## cairo_pdf('figs/misspecified-smd.pdf', family='CMU Serif', width=9, height=4.5)
## op <- par(mfrow=c(1,2))
## for(test.name in names(by.test)) {
##     p.vals.test <- by.test[[test.name]]
##     fpr <- sapply(p.vals.test, function(x)mean(x<alpha))
##     plot(ns,abs(fpr-alpha),xlab='n',ylab=paste0('|observed - nominal FPR|'), main=test.name)
## }
## par(op)
## ## dev.off()


## op <- par(mfrow=c(1,2))
## for(test.name in c('Egger','skew')) {
##     fpr.test <- sapply(fprs,function(mat)mat[test.name,])
##     matplot(ns,abs(fpr.test-alpha),pch=1,col=1,type='l',xlab='n',ylab=paste0('|observed - nominal FPR|'), main=test.name)
##     ## fpr <- sapply(p.vals.test, function(x)mean(x<alpha))
##     ## plot(ns,abs(fpr-alpha),xlab='n',ylab=paste0('|observed - nominal FPR|'), main=test.name)
## }
## par(op)
## legend('topright',lty=1:2,legend=names(n.to.Bs))


## dd


## alpha <- .1
## n.to.B <- function(n)n
## ns <- 5:20
## fprs <- fpr.sim(dgp,ns,n.to.B,alpha)

## p.vals.egger <- lapply(p.vals,function(x)x['Egger',])
## p.vals.skew <- lapply(p.vals,function(x)x['skew',])
## by.test <- list(Egger=p.vals.egger,skew=p.vals.skew)
## extrafont::loadfonts(quiet=TRUE)
## ## cairo_pdf('figs/misspecified-smd.pdf', family='CMU Serif', width=9, height=4.5)
## op <- par(mfrow=c(1,2))
## for(test.name in names(by.test)) {
##     p.vals.test <- by.test[[test.name]]
##     fpr <- sapply(p.vals.test, function(x)mean(x<alpha))
##     plot(ns,abs(fpr-alpha),xlab='n',ylab=paste0('|observed - nominal FPR|'), main=test.name)
## }
## par(op)










## redoing moment model and misspecified model with common sim/plot routines

fpr.sim <- function(dgp,ns,n.to.B,alpha) {
    ## fprs <- parallel::mclapply(ns, mc.cores=4, FUN=function(n) {
    fprs <- lapply(ns, FUN=function(n) {
        print(n)
        B <- n.to.B(n)
        ## browser()
        p.vals <- replicate(B, {
            ## z <- rZ(n)
            ## s <- rS(n)
            study.data <- dgp(n)
            y <- study.data$y; v <- study.data$v
            ## w <- matrix(rW(m*n),ncol=m)
            ## y <- rowMeans(w)
            ## v <- apply(w,1,var)/m
            ## if(is.na(egger.test(y=y,v=v)$p.value))browser()
        ## m <- n^2
        ## pi1.hat <- rbinom(n,m,pi1)/m
        ## pi2.hat <- rbinom(n,m,pi2)/m
        ## y <- log(pi1.hat/(1-pi1.hat)) - log(pi2.hat/(1-pi2.hat))
        ## v <- ( 1/pi1.hat + 1/(1-pi1.hat) + 1/(pi2.hat) + 1/(1-pi2.hat) )/m
            ## out <- c(Egger=egger.test(y=y,v=v)$p.value,
            ##          skew=skew.test(y=y,v=v)$p.value)
            ## if(any(is.na(out)))browser()
            ## out
            c(Egger=egger.test(y=y,v=v)$p.value,
              skew=skew.test(y=y,v=v)$p.value)
        })
        ## if(any(is.na(p.vals)))browser()
        rowMeans(p.vals<=alpha)
    })
    fprs <- simplify2array(fprs)
    ## if(any(is.na(fprs)))stop()
    return(fprs)
}
plot.fprs <- function(ns,fprs,param.name,param.levels,file.name=NULL,smooth=FALSE) {
    ## browser()
    if(!is.null(file.name)) {
        ## extrafont::loadfonts(quiet=TRUE)
        ## cairo_pdf(file.name, family='CMU Serif', width=9, height=4.5)
        ## par(family = "CMU Serif")
        tikzDevice::tikz(file.name, width = 6.5, height = 3)        
    }
    op <- par(mfrow=c(1,2),  mar = c(4, 4, 3, 1), mgp = c(2.2, 1, 0))
    for(test.name in c("Egger","skew")) {
        fpr.test <- sapply(fprs,function(mat)mat[test.name,])
        ## matplot(ns,abs(fpr.test-alpha),pch=1,col=1,type='l',xlab='n',ylab=paste0('|observed - nominal FPR|'), main=paste(test.name,'test'))
        vals <- abs(fpr.test-alpha)
        if(smooth)vals <- apply(vals,2,function(y)predict(loess(y~ns)))
        matplot(ns,vals,pch=1,col=1,type='l',xlab='number of studies',ylab="$|$observed - nominal FPR$|$", main=paste(test.name,'test'))
    }
    legend('topright',lty=1:length(param.levels),legend=param.levels,title=param.name,cex=.8)
    par(op)
    if(!is.null(file.name)) dev.off()
}
## plot.fprs <- function(ns,fprs,param.name,param.levels,file.name=NULL,smooth=FALSE) {
##     if(!is.null(file.name)) {
##         extrafont::loadfonts(quiet=TRUE)
##         cairo_pdf(file.name, family='CMU Serif', width=9, height=4.5)
##         par(family = "CMU Serif")
##     }
##     op <- par(mfrow=c(1,2))
##     for(test.name in c("Egger","skew")) {
##         fpr.test <- sapply(fprs,function(mat)mat[test.name,])
##         ## matplot(ns,abs(fpr.test-alpha),pch=1,col=1,type='l',xlab='n',ylab=paste0('|observed - nominal FPR|'), main=paste(test.name,'test'))
##         vals <- abs(fpr.test-alpha)
##         if(smooth)vals <- apply(vals,2,function(y)predict(loess(y~ns)))
##         matplot(ns,vals,pch=1,col=1,type='l',xlab='n',ylab=paste0('|observed - nominal FPR|'), main=paste(test.name,'test'))
##     }
##     legend('topright',lty=1:length(param.levels),legend=param.levels,title=param.name,cex=.8)
##     par(op)
##     if(!is.null(file.name)) dev.off()
## }










## moment model

set.seed(1)
ns <- 5:100
alpha <- .1
n.to.B <- function(n)n^2
skew.levels <- c(a=1,b=2,c=3)
mu <- 0
sigma.to.skew <- function(sigma)(exp(sigma^2)+2)*sqrt(exp(sigma^2)-1)
params <- sigmas <- sapply(skew.levels, function(skew.level) uniroot(function(sigma)sigma.to.skew(sigma)-skew.level,c(0,10))$root)
fprs <- lapply(sigmas, function(sigma) {
    dgp <- function(n) {
        ## ms <- sample(20:1e2,n,replace=TRUE)
        ms <- rpois(n,lambda=20)
        y <- sapply(ms, function(m) mean(exp(rnorm(m,mean=0,sd=sigma))))
        v <- sqrt((exp(sigma^2)-1)*exp(2*mu+sigma^2)) / ms
        return(list(y=y,v=v))
    }
    fpr.sim(dgp,ns,n.to.B,alpha)
})
## save.image('250625b.RData')
save.image('250817b.RData')
## plot.fprs(ns,fprs,param.name='skew',param.levels=skew.levels)
file.name <- './figs/moment.tex'
## file.name <- NULL
plot.fprs(ns,fprs,param.name="skew",param.levels=skew.levels,file.name=file.name,smooth=TRUE)




## ## misspecified model--smds

## source('utils.R')
## ns <- 5:100
## alpha <- .1
## n.to.B <- function(n)1e3
## skew.level <- 1
## sigma.to.skew <- function(sigma)(exp(sigma^2)+2)*sqrt(exp(sigma^2)-1)
## sigma <- uniroot(function(sigma)sigma.to.skew(sigma)-skew.level,c(0,10))$root
## rW <- function(m)exp(rnorm(m,0,sd=sigma))
## ## n.to.Bs <- list(a=function(n)30,b=function(n)20)
## ## n.to.ms <- list(function(n)20,function(n)n,function(n)n^2)
## ## n.to.ms <- list(function(n)rpois(n,20),function(n)rpois(n,n),function(n)rpois(n,n^2))
## n.to.ms <- list(function(n)rep(20,n),function(n)rep(n,n),function(n)rep(n^2,n))
## start <- Sys.time()
## fprs <- lapply(n.to.ms, function(n.to.m) {
##     dgp <- function(n) {
##         ## m <- n.to.m(n)
##         ## w <- matrix(rW(m*n),ncol=m)
##         ## y <- rowMeans(w)
##         ## v <- apply(w,1,var)/m
##         ms <- n.to.m(n)
##         w <- lapply(ms,rW)
##         y <- sapply(w,mean)
##         v <- sapply(w,var)/ms
##         return(list(y=y,v=v))
##     }
##     fpr.sim(dgp,ns,n.to.B,alpha)
## })
## ## save.image('250625c.RData')
## file.name <- './figs/misspecified-smd.tex'
## file.name <- NULL
## print(Sys.time()-start)
## ## plot.fprs(ns,fprs,param.name=expression(paste(order~of~m[i])),param.levels=c("O(1)","O(n)","O(n^2)"),file.name=file.name,smooth=TRUE)
## plot.fprs(ns,fprs,param.name="order of $m_i$",param.levels=c("$O(1)$","$O(n)$","$O(n^2)$"),file.name=file.name,smooth=TRUE)




## misspecified model--smds--trying poisson m_i
set.seed(1)
source('utils.R')
ns <- 5:100
alpha <- .1
n.to.B <- function(n)1e3
skew.level <- 1
sigma.to.skew <- function(sigma)(exp(sigma^2)+2)*sqrt(exp(sigma^2)-1)
sigma <- uniroot(function(sigma)sigma.to.skew(sigma)-skew.level,c(0,10))$root
rW <- function(m)exp(rnorm(m,0,sd=sigma))
## n.to.Bs <- list(a=function(n)30,b=function(n)20)
## n.to.ms <- list(function(n)20,function(n)n,function(n)n^2)
## n.to.ms <- list(function(n)rpois(n,20),function(n)rpois(n,n),function(n)rpois(n,n^2))
## n.to.ms <- list(function(n)rep(20,n),function(n)rep(n,n),function(n)rep(n^2,n))
n.to.ms <- list(function(n)rpois(n,lambda=rep(20,n)),function(n)2+rpois(n,lambda=rep(n,n)),function(n)2+rpois(n,rep(n^2,n)))
n.to.ms <- rev(n.to.ms)
start <- Sys.time()
fprs <- lapply(n.to.ms, function(n.to.m) {
    dgp <- function(n) {
        ## m <- n.to.m(n)
        ## w <- matrix(rW(m*n),ncol=m)
        ## y <- rowMeans(w)
        ## v <- apply(w,1,var)/m
        ms <- n.to.m(n)+2
        w <- lapply(ms,rW)
        y <- sapply(w,mean)
        v <- sapply(w,var)/ms
        ## if(any(is.na(v)))browser()
        return(list(y=y,v=v))
    }
    fpr.sim(dgp,ns,n.to.B,alpha)
})
## save.image('250625c.RData')
save.image('250817c.RData')
file.name <- './figs/misspecified-smd.tex'
## file.name <- NULL
print(Sys.time()-start)
## plot.fprs(ns,fprs,param.name=expression(paste(order~of~m[i])),param.levels=c("O(1)","O(n)","O(n^2)"),file.name=file.name,smooth=TRUE)
plot.fprs(ns,fprs,param.name="order of $m_i$",param.levels=c("$O(1)$","$O(n)$","$O(n^2)$"),file.name=file.name,smooth=TRUE)
## reverse order so best case is consistently a solid black line 
## plot.fprs(ns,rev(fprs),param.name="order of $m_i$",param.levels=rev(c("$O(1)$","$O(n)$","$O(n^2)$")),file.name=file.name,smooth=TRUE)





## ## misspecified model--log odds. have to increase ns to get estimable
## ## probabilities if pi1,pi2 are too far from .5.  maybe use rpois to
## ## get heterogeneous m's.
## set.seed(1)
## source('utils.R')
## ns <- 20:100
## ## ns <- round(seq(1e2,1e3,len=20))
## alpha <- .1
## n.to.B <- function(n)3e2
## pi1 <- .4
## pi2 <- .45
## ## pi1 <- pi2 <- .5
## n.to.ms <- list(function(n)rep(40,n),function(n)rep(2*n,n),function(n)rep(n^2,n))
## start <- Sys.time()
## fprs <- lapply(n.to.ms, function(n.to.m) {
##     dgp <- function(n) {
##         ms <- n.to.m(n)
##         pi1.hats <- rbinom(n,ms,pi1)/ms
##         pi2.hats <- rbinom(n,ms,pi2)/ms
##         ## log odds
##         y <- log(pi1.hats/(1-pi1.hats)) - log(pi2.hats/(1-pi2.hats))
##         v <- ( 1/pi1.hats + 1/(1-pi1.hats) + 1/(pi2.hats) + 1/(1-pi2.hats) )/ms
##         if(any(is.infinite(y)))browser()
##         return(list(y=y,v=v))
##     }
##     fpr.sim(dgp,ns,n.to.B,alpha)
## })
## ## save.image('250625c.RData')
## ## file.name <- './figs/misspecified-logodds.tex'
## file.name <- NULL
## print(Sys.time()-start)
## ## plot.fprs(ns,fprs,param.name=expression(paste(order~of~m[i])),param.levels=c("O(1)","O(n)","O(n^2)"),file.name=file.name,smooth=TRUE)
## plot.fprs(ns,fprs,param.name="order of $m_i$",param.levels=c("$O(1)$","$O(n)$","$O(n^2)$"),file.name=file.name,smooth=TRUE)






## ## misspecified model--log odds. effect of delta=pi2-pi1
## set.seed(1)
## source('utils.R')
## ## ns <- 20:100
## ns <- round(seq(20,1e3,len=20))
## alpha <- .1
## n.to.B <- function(n)1e2
## ## pi1 <- .55
## ## pi2 <- .65
## ## n.to.ms <- list(function(n)rep(40,n),function(n)rep(2*n,n),function(n)rep(n^2,n))
## n.to.m <- function(n)rep(n^2,n)
## deltas <- seq(0,.1,len=4)
## start <- Sys.time()
## fprs <- lapply(deltas, function(delta) {
##     pi1 <- .5-delta/2
##     pi2 <- .5+delta/2
##     pi1 <- .55    
##     dgp <- function(n) {
##         ## m <- n.to.m(n)
##         ## w <- matrix(rW(m*n),ncol=m)
##         ## y <- rowMeans(w)
##         ## v <- apply(w,1,var)/m
##         ms <- n.to.m(n)
##         ## w <- lapply(ms,rW)
##         ## y <- sapply(w,mean)
##         ## v <- sapply(w,var)/ms
##         pi1.hats <- rbinom(n,ms,pi1)/ms
##         pi2.hats <- rbinom(n,ms,pi2)/ms
##         ## log odds
##         y <- log(pi1.hats/(1-pi1.hats)) - log(pi2.hats/(1-pi2.hats))
##         v <- ( 1/pi1.hats + 1/(1-pi1.hats) + 1/(pi2.hats) + 1/(1-pi2.hats) )/ms
##         if(any(is.infinite(y)))browser()
##         return(list(y=y,v=v))
##     }
##     fpr.sim(dgp,ns,n.to.B,alpha)
## })
## ## save.image('250625c.RData')
## ## file.name <- './figs/misspecified-logodds.tex'
## file.name <- NULL
## print(Sys.time()-start)
## ## plot.fprs(ns,fprs,param.name=expression(paste(order~of~m[i])),param.levels=c("O(1)","O(n)","O(n^2)"),file.name=file.name,smooth=TRUE)
## plot.fprs(ns,fprs,param.name="$p_2-p_1$",param.levels=round(deltas,2),file.name=file.name,smooth=TRUE)






## misspecified model--log odds. effect of mu = average log odds
set.seed(1)
source('utils.R')
ns <- 20:100
## ns <- round(seq(20,1e3,len=20))
alpha <- .1
n.to.B <- function(n)1e3
n.to.m <- function(n)rep(n^2,n)
delta <- .05
mus <- seq(0,.1,len=3)
mus <- rev(mus)
start <- Sys.time()
fprs <- lapply(mus, function(mu) {
    pi1 <- plogis(mu-delta/2)
    pi2 <- plogis(mu+delta/2)
    dgp <- function(n) {
        ms <- n.to.m(n)
        pi1.hats <- rbinom(n,ms,pi1)/ms
        pi2.hats <- rbinom(n,ms,pi2)/ms
        ## log odds
        y <- log(pi1.hats/(1-pi1.hats)) - log(pi2.hats/(1-pi2.hats))
        v <- ( 1/pi1.hats + 1/(1-pi1.hats) + 1/(pi2.hats) + 1/(1-pi2.hats) )/ms
        if(any(is.infinite(y)))browser()
        return(list(y=y,v=v))
    }
    fpr.sim(dgp,ns,n.to.B,alpha)
})
## save.image('250625c.RData')
save.image('250817d.RData')
file.name <- './figs/misspecified-logodds-mu.tex'
## file.name <- NULL
print(Sys.time()-start)
plot.fprs(ns,fprs,param.name="$\\mu$",param.levels=round(mus,2),file.name=file.name,smooth=TRUE)








